<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="105" failures="0" errors="0" time="8.803">
  <testsuite name="isExtensionConfig()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="3.373" tests="16">
    <testcase classname="isExtensionConfig() return false on invalid ExtensionConfig" name="isExtensionConfig() return false on invalid ExtensionConfig" time="0.004">
    </testcase>
    <testcase classname="isExtensionConfig() return true on valid ExtensionConfig" name="isExtensionConfig() return true on valid ExtensionConfig" time="0">
    </testcase>
    <testcase classname="isExtensionConfigArray() return false for non-arrays" name="isExtensionConfigArray() return false for non-arrays" time="0.001">
    </testcase>
    <testcase classname="isExtensionConfigArray() return false if any array element fails isExtensionConfig()" name="isExtensionConfigArray() return false if any array element fails isExtensionConfig()" time="0.002">
    </testcase>
    <testcase classname="isExtensionConfigArray() return true for valid input" name="isExtensionConfigArray() return true for valid input" time="0">
    </testcase>
    <testcase classname="isPartialExtensionConfigArray() return false for non-arrays" name="isPartialExtensionConfigArray() return false for non-arrays" time="0.001">
    </testcase>
    <testcase classname="isPartialExtensionConfigArray() return false if any array element fails isPartialExtensionConfig()" name="isPartialExtensionConfigArray() return false if any array element fails isPartialExtensionConfig()" time="0.001">
    </testcase>
    <testcase classname="isPartialExtensionConfigArray() return true for valid input" name="isPartialExtensionConfigArray() return true for valid input" time="0">
    </testcase>
    <testcase classname="mergeExtensionConfigs() perform typical merge for standard" name="mergeExtensionConfigs() perform typical merge for standard" time="0.001">
    </testcase>
    <testcase classname="mergeExtensionConfigs() perform typical merge for composer extension" name="mergeExtensionConfigs() perform typical merge for composer extension" time="0">
    </testcase>
    <testcase classname="mergeExtensionConfigs() include optional props from baseline" name="mergeExtensionConfigs() include optional props from baseline" time="0">
    </testcase>
    <testcase classname="mergeExtensionConfigs() override baseline" name="mergeExtensionConfigs() override baseline" time="0.001">
    </testcase>
    <testcase classname="mergeExtensionConfigs() use &apos;composer&apos; prop if specified used &apos;composer&apos; and baseline used &apos;repo&apos;" name="mergeExtensionConfigs() use &apos;composer&apos; prop if specified used &apos;composer&apos; and baseline used &apos;repo&apos;" time="0">
    </testcase>
    <testcase classname="mergeExtensionConfigs() use &apos;repo&apos; prop if specified used &apos;repo&apos; and baseline used &apos;compose&apos;" name="mergeExtensionConfigs() use &apos;repo&apos; prop if specified used &apos;repo&apos; and baseline used &apos;compose&apos;" time="0">
    </testcase>
    <testcase classname="getExtensionConfig() handle a simple config merge" name="getExtensionConfig() handle a simple config merge" time="0.001">
    </testcase>
    <testcase classname="getExtensionConfig() log an error if an incomplete extension config is encountered" name="getExtensionConfig() log an error if an incomplete extension config is encountered" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="doLocalSettings()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="3.388" tests="7">
    <testcase classname="doLocalSettings() case 1: handle typical wiki" name="doLocalSettings() case 1: handle typical wiki" time="0.01">
    </testcase>
    <testcase classname="doLocalSettings() case 2: handle two primary wikis and overlapping redirects" name="doLocalSettings() case 2: handle two primary wikis and overlapping redirects" time="0.001">
    </testcase>
    <testcase classname="doLocalSettings() case 3: handle no primary wiki and app server running services" name="doLocalSettings() case 3: handle no primary wiki and app server running services" time="0.002">
    </testcase>
    <testcase classname="doLocalSettings() case 4: handle dev config and alternate settings" name="doLocalSettings() case 4: handle dev config and alternate settings" time="0.001">
    </testcase>
    <testcase classname="doPermissions() handle viewer-read permissions" name="doPermissions() handle viewer-read permissions" time="0">
    </testcase>
    <testcase classname="doPermissions() handle &apos;none&apos; permissions" name="doPermissions() handle &apos;none&apos; permissions" time="0.001">
    </testcase>
    <testcase classname="doPermissions() handle anon-edit permissions" name="doPermissions() handle anon-edit permissions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="asyncExec()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="3.461" tests="2">
    <testcase classname="asyncExec() reject/throw for a bad command 2222222222" name="asyncExec() reject/throw for a bad command 2222222222" time="0.036">
    </testcase>
    <testcase classname="asyncExec() resolve for a valid command" name="asyncExec() resolve for a valid command" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="propsMatch()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="3.467" tests="5">
    <testcase classname="propsMatch() return true for simple primitive cases" name="propsMatch() return true for simple primitive cases" time="0.004">
    </testcase>
    <testcase classname="propsMatch() return true if the desired props match and others do not" name="propsMatch() return true if the desired props match and others do not" time="0">
    </testcase>
    <testcase classname="propsMatch() return false for failed simple primitive cases" name="propsMatch() return false for failed simple primitive cases" time="0.001">
    </testcase>
    <testcase classname="propsMatch() return true for deep-equality cases" name="propsMatch() return true for deep-equality cases" time="0.002">
    </testcase>
    <testcase classname="propsMatch() return false for failed deep-equality cases" name="propsMatch() return false for failed deep-equality cases" time="0">
    </testcase>
  </testsuite>
  <testsuite name="processExtensions()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="4.661" tests="6">
    <testcase classname="processExtensions() error when loading YAML throws" name="processExtensions() error when loading YAML throws" time="0.003">
    </testcase>
    <testcase classname="processExtensions() error when baseline isn&apos;t ExtensionConfig[]" name="processExtensions() error when baseline isn&apos;t ExtensionConfig[]" time="0.002">
    </testcase>
    <testcase classname="processExtensions() error when baseline isn&apos;t PartialExtensionConfig[]" name="processExtensions() error when baseline isn&apos;t PartialExtensionConfig[]" time="0">
    </testcase>
    <testcase classname="processExtensions() indicate changed when a baseline+specifier are valid with no prior install" name="processExtensions() indicate changed when a baseline+specifier are valid with no prior install" time="0.005">
    </testcase>
    <testcase classname="processExtensions() indicate no change if prior install matches current" name="processExtensions() indicate no change if prior install matches current" time="0.001">
    </testcase>
    <testcase classname="processExtensions() error if composer command fails (or any doExtensions() command)" name="processExtensions() error if composer command fails (or any doExtensions() command)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="shouldUpdateExtension()" errors="0" failures="0" skipped="0" timestamp="2022-03-28T19:11:08" time="4.749" tests="69">
    <testcase classname="shouldUpdateExtension() update extension if props change" name="shouldUpdateExtension() update extension if props change" time="0.002">
    </testcase>
    <testcase classname="shouldUpdateExtension() not update extension if props don&apos;t change" name="shouldUpdateExtension() not update extension if props don&apos;t change" time="0.001">
    </testcase>
    <testcase classname="shouldUpdateExtension() update extension if no old conf" name="shouldUpdateExtension() update extension if no old conf" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() run update.php if props change" name="shouldRunUpdatePhp() run update.php if props change" time="0.001">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() never require update.php if update_php_on_change is false" name="shouldRunUpdatePhp() never require update.php if update_php_on_change is false" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() not run update.php if props don&apos;t change" name="shouldRunUpdatePhp() not run update.php if props don&apos;t change" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() not run update.php if only config change and extension states &apos;code-changes&apos;" name="shouldRunUpdatePhp() not run update.php if only config change and extension states &apos;code-changes&apos;" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() run update.php on all wikis if no old conf and extension requires update.php and is on all wikis" name="shouldRunUpdatePhp() run update.php on all wikis if no old conf and extension requires update.php and is on all wikis" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() run update.php on specific wikis if no old conf and extension requires update.php and is only on specific wikis" name="shouldRunUpdatePhp() run update.php on specific wikis if no old conf and extension requires update.php and is only on specific wikis" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() not run update.php if no old conf and extension does not require update.php" name="shouldRunUpdatePhp() not run update.php if no old conf and extension does not require update.php" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() specify which wikis to run changes on if only wikis added" name="shouldRunUpdatePhp() specify which wikis to run changes on if only wikis added" time="0.001">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() not require update.php if only wikis removed" name="shouldRunUpdatePhp() not require update.php if only wikis removed" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() only require update.php for added wiki if one wiki added and one removed" name="shouldRunUpdatePhp() only require update.php for added wiki if one wiki added and one removed" time="0.001">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() be uneffected by reordering wikis" name="shouldRunUpdatePhp() be uneffected by reordering wikis" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle going from specifying wikis to all-wikis (not specifying wikis)" name="shouldRunUpdatePhp() handle going from specifying wikis to all-wikis (not specifying wikis)" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() only update specified wikis if the wiki&apos;s version updates" name="shouldRunUpdatePhp() only update specified wikis if the wiki&apos;s version updates" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 1: don&apos;t update.php if no-change AND all-wikis-before and all-wikis-now" name="shouldRunUpdatePhp() handle case 1: don&apos;t update.php if no-change AND all-wikis-before and all-wikis-now" time="0.001">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 2: don&apos;t update.php if no-change AND all-wikis-before and select-wikis-now" name="shouldRunUpdatePhp() handle case 2: don&apos;t update.php if no-change AND all-wikis-before and select-wikis-now" time="0.002">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 3: update.php-for-all if no-change AND select-wikis-before and all-wikis-now" name="shouldRunUpdatePhp() handle case 3: update.php-for-all if no-change AND select-wikis-before and all-wikis-now" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 4: update.php-for-NEW-wikis if no-change AND select-wikis-before and select-wikis-now" name="shouldRunUpdatePhp() handle case 4: update.php-for-NEW-wikis if no-change AND select-wikis-before and select-wikis-now" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 5: update.php-for-all if changed AND all-wikis-before and all-wikis-now" name="shouldRunUpdatePhp() handle case 5: update.php-for-all if changed AND all-wikis-before and all-wikis-now" time="0.001">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 6: update.php-for-NOW-wikis if changed AND all-wikis-before and select-wikis-now" name="shouldRunUpdatePhp() handle case 6: update.php-for-NOW-wikis if changed AND all-wikis-before and select-wikis-now" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 7: update.php-for-all if changed AND select-wikis-before and all-wikis-now" name="shouldRunUpdatePhp() handle case 7: update.php-for-all if changed AND select-wikis-before and all-wikis-now" time="0">
    </testcase>
    <testcase classname="shouldRunUpdatePhp() handle case 8: update.php-for-NOW-wikis if changed AND select-wikis-before and select-wikis-now" name="shouldRunUpdatePhp() handle case 8: update.php-for-NOW-wikis if changed AND select-wikis-before and select-wikis-now" time="0.001">
    </testcase>
    <testcase classname="createLoadCommand() return empty string for composer extensions" name="createLoadCommand() return empty string for composer extensions" time="0">
    </testcase>
    <testcase classname="createLoadCommand() return require_once for legacy loaded extension" name="createLoadCommand() return require_once for legacy loaded extension" time="0">
    </testcase>
    <testcase classname="createLoadCommand() return require_once for legacy loaded skin" name="createLoadCommand() return require_once for legacy loaded skin" time="0">
    </testcase>
    <testcase classname="createLoadCommand() use extension loader for normal extensions" name="createLoadCommand() use extension loader for normal extensions" time="0">
    </testcase>
    <testcase classname="createLoadCommand() use extension loader for normal skins" name="createLoadCommand() use extension loader for normal skins" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for normal extension" name="createExtensionSettings() produce settings for normal extension" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for normal skin" name="createExtensionSettings() produce settings for normal skin" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for composer extension" name="createExtensionSettings() produce settings for composer extension" time="0.001">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for legacy-load extension" name="createExtensionSettings() produce settings for legacy-load extension" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings without config" name="createExtensionSettings() produce settings without config" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings without more_config" name="createExtensionSettings() produce settings without more_config" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings without config or more_config" name="createExtensionSettings() produce settings without config or more_config" time="0.001">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for wiki-specific extensions" name="createExtensionSettings() produce settings for wiki-specific extensions" time="0">
    </testcase>
    <testcase classname="createExtensionSettings() produce settings for empty wikis (clones extension but no wikis use)" name="createExtensionSettings() produce settings for empty wikis (clones extension but no wikis use)" time="0">
    </testcase>
    <testcase classname="isGitRepo() fail if path doesn&apos;t exist" name="isGitRepo() fail if path doesn&apos;t exist" time="0.002">
    </testcase>
    <testcase classname="isGitRepo() fail if doesn&apos;t have .git/ sub-directory" name="isGitRepo() fail if doesn&apos;t have .git/ sub-directory" time="0">
    </testcase>
    <testcase classname="isGitRepo() return true if path exists and has .git/ sub-directory" name="isGitRepo() return true if path exists and has .git/ sub-directory" time="0.001">
    </testcase>
    <testcase classname="isGitRepo() throw if unable to delete existing non-git directory" name="isGitRepo() throw if unable to delete existing non-git directory" time="0.044">
    </testcase>
    <testcase classname="gitCheckoutCommand() create command that fetches and cleans up repo" name="gitCheckoutCommand() create command that fetches and cleans up repo" time="0">
    </testcase>
    <testcase classname="gitCheckoutCommand() create command that fetch" name="gitCheckoutCommand() create command that fetch" time="0">
    </testcase>
    <testcase classname="gitCheckoutCommand() create command that just cleans up repo" name="gitCheckoutCommand() create command that just cleans up repo" time="0">
    </testcase>
    <testcase classname="gitCheckoutCommand() just checks out the correct version" name="gitCheckoutCommand() just checks out the correct version" time="0">
    </testcase>
    <testcase classname="makeGitRight() handle existing repo-directory with valid commands" name="makeGitRight() handle existing repo-directory with valid commands" time="0">
    </testcase>
    <testcase classname="makeGitRight() handle existing repo-directory with invalid commands" name="makeGitRight() handle existing repo-directory with invalid commands" time="0">
    </testcase>
    <testcase classname="makeGitRight() should handle missing repo-directory with valid commands" name="makeGitRight() should handle missing repo-directory with valid commands" time="0.004">
    </testcase>
    <testcase classname="makeGitRight() handle missing repo-directory with invalid commands" name="makeGitRight() handle missing repo-directory with invalid commands" time="0.001">
    </testcase>
    <testcase classname="makeGitRight() handle non-git repo when insufficient rights to delete directory" name="makeGitRight() handle non-git repo when insufficient rights to delete directory" time="0">
    </testcase>
    <testcase classname="doComposerExtensions() not replace baseline composer.local.json if no change" name="doComposerExtensions() not replace baseline composer.local.json if no change" time="0.002">
    </testcase>
    <testcase classname="doComposerExtensions() replace baseline composer.local.json if changed" name="doComposerExtensions() replace baseline composer.local.json if changed" time="0.001">
    </testcase>
    <testcase classname="doComposerExtensions() write baseline composer.local.json if no preexisting file" name="doComposerExtensions() write baseline composer.local.json if no preexisting file" time="0">
    </testcase>
    <testcase classname="doComposerExtensions() return false if unable to write file" name="doComposerExtensions() return false if unable to write file" time="0.001">
    </testcase>
    <testcase classname="doComposerExtensions() add composer and composer-merge extensions" name="doComposerExtensions() add composer and composer-merge extensions" time="0.001">
    </testcase>
    <testcase classname="doExtensionSettings() write ExtensionSettings.php" name="doExtensionSettings() write ExtensionSettings.php" time="0">
    </testcase>
    <testcase classname="doExtensionSettings() return false and console.error if unable to write ExtensionSettings.php" name="doExtensionSettings() return false and console.error if unable to write ExtensionSettings.php" time="0.001">
    </testcase>
    <testcase classname="doExtensions() handle empty config and no prior install" name="doExtensions() handle empty config and no prior install" time="0">
    </testcase>
    <testcase classname="doExtensions() handle empty config and empty prior install" name="doExtensions() handle empty config and empty prior install" time="0">
    </testcase>
    <testcase classname="doExtensions() write first real config and inform to run update.php" name="doExtensions() write first real config and inform to run update.php" time="0.002">
    </testcase>
    <testcase classname="doExtensions() overwrite config and inform to run update.php" name="doExtensions() overwrite config and inform to run update.php" time="0.001">
    </testcase>
    <testcase classname="doExtensions() overwrite config and inform to run update.php for added wiki when extension requires it" name="doExtensions() overwrite config and inform to run update.php for added wiki when extension requires it" time="0">
    </testcase>
    <testcase classname="doExtensions() overwrite config and merge requirements for which wikis to run update.php" name="doExtensions() overwrite config and merge requirements for which wikis to run update.php" time="0">
    </testcase>
    <testcase classname="doExtensions() overwrite config and run update.php on all wikis" name="doExtensions() overwrite config and run update.php on all wikis" time="0.001">
    </testcase>
    <testcase classname="doExtensions() handle skins" name="doExtensions() handle skins" time="0">
    </testcase>
    <testcase classname="doExtensions() errors error if unable to run git commands" name="doExtensions() errors error if unable to run git commands" time="0.001">
    </testcase>
    <testcase classname="doExtensions() errors error if fails to write ExtensionSettings.php" name="doExtensions() errors error if fails to write ExtensionSettings.php" time="0.001">
    </testcase>
    <testcase classname="doExtensions() errors error if fails to run composer commands" name="doExtensions() errors error if fails to run composer commands" time="0.001">
    </testcase>
  </testsuite>
</testsuites>